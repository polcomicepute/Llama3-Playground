dog
<image>\nUSER:\n
Detect dog on the image. 
Return Coordinates in x_min, y_min, x_max, and y_max format.
\nASSISTANT:\n
[0.18, 0.32, 0.45, 0.65]

draw a box on the uploaded image using  [0.18, 0.32, 0.45, 0.65] coordinates.
coordinates are defined in [x_min, y_min, x_max, y_max] relative to image width and height.

output format 지정을 예시와 함께 안주니까 딴소리 엄청하네
[0.769,0.167,0.681,0.417]

    This is the car in the image. It's a white van parked on the street. The coordinates are [0.769,0.167,0.681,0.417]. 
Traceback (most recent call last):
  File "/home/jetson/llamaR/Llama3-Playground/llava/planning/plan_mistral.py", line 60, in <module>
    x_min, y_min, x_max, y_max = map(float, coords_list)
ValueError: could not convert string to float: "0.417]\n\n    This is the car in the image. It's a white van parked on the street. The coordinates are [0.769"

[0.769,0.167,0.681,0.417] 
0.769 0.167 0.681 0.417
Traceback (most recent call last):
  File "/home/jetson/llamaR/Llama3-Playground/llava/planning/plan_mistral.py", line 73, in <module>
    draw.rectangle(coords, outline="red", width=3)
  File "/home/jetson/.local/lib/python3.10/site-packages/PIL/ImageDraw.py", line 305, in rectangle
    self.draw.draw_rectangle(xy, ink, 0, width)
ValueError: x1 must be greater than or equal to x0


car)
[0.527,0.196,0.845,0.391] 
0.527 0.196 0.845 0.391

user_msg = f"""'''
<image>\nUSER:\n
Detect {user_input} on the image. 
If (the object is not detected): return Just `None`, No other answers.
Else (the object is detected): return Just Coordinates in [x_min, y_min, x_max, y_max] format, No other answers.
    Coordinates are defined in [x_min, y_min, x_max, y_max] relative to image width and height.


\n
\nASSISTANT:\n
'''"""

#     Output should follow the format: `[x_min, y_min, x_max, y_max]`\n 

cat)
None 
Traceback (most recent call last):
  File "/home/jetson/llamaR/Llama3-Playground/llava/planning/plan_mistral.py", line 63, in <module>
    x_min, y_min, x_max, y_max = map(float, coords_list)
ValueError: could not convert string to float: ''









 None''' 
Traceback (most recent call last):
  File "/home/jetson/llamaR/Llama3-Playground/llava/planning/plan_mistral.py", line 60, in <module>
    x_min, y_min, x_max, y_max = map(float, coords_list)
ValueError: could not convert string to float: ''


user_msg = f"""'''
<image>\nUSER:\n
Detect {user_input} on the image. 
If (the object is not detected): 
    return Just `None`, No other answers. \n
If (the object is detected): 
    return Just Coordinates defined in [x_min, y_min, x_max, y_max] relative to image width and height, No other answers.Coordinates output should follow the format: `[x_min, y_min, x_max, y_max]`\n   

\nASSISTANT:\n
'''"""


user_msg = f"""'''
<image>\nUSER:\n
Detect {user_input} on the image. 


if (the object is detected): 
    Coordinates is defined in [x_min, y_min, x_max, y_max] relative to image width and height
    Coordinates output should follow the format: `[x_min, y_min, x_max, y_max]`
    return (Just Coordinates `[x_min, y_min, x_max, y_max]`)\n\n

else:
    return (Just `None`)\n\n

    
     

\nASSISTANT:\n


<image>\nUSER:\n
Please detect the following objects in the image: [{user_input}].

For each detected object in the list, provide the coordinates in the following format:
  {{
    'object_name': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n
If object is NOT detected, return:
  {{
    "object_name": {{
        "x_min": -1000,
        "y_min": -1000,
        "x_max": -1000,
        "y_max": -1000
    }}
  }}

  For example, If one object 'x' is detected in list [x]:
  {{
    'x': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n
    If two objects 'x, y' are detected in list [x, y]:
  {{
    'x': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }},
    'y': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n  
    If one object 'z' is NOT detected in list [z], return:
{{
    'z': {{
        "x_min": -1000,
        "y_min": -1000,
        "x_max": -1000,
        "y_max": -1000
    	}}
}}\n
    If 'l' is detected, and 'q' is NOT detected in list [l, q], return:
{{
    'l': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }},
    'q': {{
        "x_min": -1000,
        "y_min": -1000,
        "x_max": -1000,
        "y_max": -1000
        }}
}}\n 


Ensure the output is in valid JSON format.
\nASSISTANT:\n



user_msg = f"""'''
<image>\nUSER:\n
Detect {user_input} on the image. 

for 'object' in [{user_input}]:
    if ('object' is detected): return Coordinates of 'object' relative to image width and height. Output should follow the format: `'object': [x_min, y_min, x_max, y_max]`.\n
    else: Output should follow the format: `None`: true.\n\n
'''"""
user_msg_ex = '''
so, If one object is detected:
{
    "object1": {
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
  }
}\n

If two objects are detected:
{
    "object1": {
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    },
    "object2": {
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }
}\n


If 'None' is detected: {"None":true}\n


\nASSISTANT:\n''' 














<image>\nUSER:\n
Please detect the following objects in the image: [{user_input}].

For each detected object in the list, provide the coordinates in the following format:
  {{
    'object_name': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n
If object is NOT detected, return:
  {{
    "object_name": {{
        "x_min": -1000,
        "y_min": -1000,
        "x_max": -1000,
        "y_max": -1000
    }}
  }}

  For example, If one object 'x' is detected in list [x]:
  {{
    'x': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n
    If two objects 'x, y' are detected in list [x, y]:
  {{
    'x': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }},
    'y': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n  
    If one object 'z' is NOT detected in list [z], return:
{{
    'z': {{
        "x_min": -1000,
        "y_min": -1000,
        "x_max": -1000,
        "y_max": -1000
    	}}
}}\n
    If 'l' is detected, and 'q' is NOT detected in list [l, q], return:
{{
    'l': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }},
    'q': {{
        "x_min": -1000,
        "y_min": -1000,
        "x_max": -1000,
        "y_max": -1000
        }}
}}\n 


Ensure the output is in valid JSON format.
\nASSISTANT:\n














원하는 odj를 입력하세요: cat
encode_image_with_clip: 5 segments encoded in  2294.97 ms
encode_image_with_clip: image embedding created: 2880 tokens

encode_image_with_clip: image encoded in  2419.07 ms by CLIP (    0.84 ms per image patch)
Llama.generate: prefix-match hit

llama_print_timings:        load time =   12752.76 ms
llama_print_timings:      sample time =     579.12 ms /    52 runs   (   11.14 ms per token,    89.79 tokens per second)
llama_print_timings: prompt eval time =       0.00 ms /     0 tokens (     nan ms per token,      nan tokens per second)
llama_print_timings:        eval time =    6925.35 ms /    52 runs   (  133.18 ms per token,     7.51 tokens per second)
llama_print_timings:       total time =    7795.11 ms /    52 tokens
{"dog": {"x_min": 0.234, "y_min": 0.509, "x_max": 0.681, "y_max": 0.827}}
최종 탐지 결과: dict_keys(['dog'])











<image>\nUSER:\n
Please detect the following objects in the image: [{user_input}].

For each detected object [{user_input}], provide the coordinates in the following format:
  {{
    'object_name': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n
  
If any of the values are missing or NOT detected, use the following default:
{{
  'object_name': {{
      "x_min": -1000,
      "y_min": -1000,
      "x_max": -1000,
      "y_max": -1000
  }}
}}














user_msg = f"""
<image>\nUSER:\n
Please detect the following objects in the image: [{user_input}].

For each detected object [{user_input}], provide the coordinates in the following format:
  {{
    'object_name': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n
  
If any of the values are missing or NOT detected, use the following default:
{{
  'object_name': {{
      "x_min": -1000,
      "y_min": -1000,
      "x_max": -1000,
      "y_max": -1000
  }}
}}
  For example, If one object 'x' is detected in list [x]:
  {{
    'x': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n
    If two objects 'x, y' are detected in list [x, y]:
  {{
    'x': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }},
    'y': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n  
    If one object 'z' is NOT detected in list [z], return:
{{
    'z': {{
        "x_min": -1000,
        "y_min": -1000,
        "x_max": -1000,
        "y_max": -1000
    	}}
}}\n
    If 'l' is detected, and 'q' is NOT detected in list [l, q], return:
{{
    'l': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }},
    'q': {{
        "x_min": -1000,
        "y_min": -1000,
        "x_max": -1000,
        "y_max": -1000
        }}
}}\n 


Ensure the output is in valid JSON format.
\nASSISTANT:\n
"""










user_msg = f"""
<image>\nUSER:\n
Please detect the following objects in the image: [{user_input}]. 

For each object in the list [{user_input}],
  for obj in [{user_input}]:
        if (obj is detected), return the coordinates in the following format:
            {{
                obj: {{
                    "x_min": <float>,
                    "y_min": <float>,
                    "x_max": <float>,
                    "y_max": <float>
                }}
            }}\n
        else(==Only if obj is NOT detected), return the coordinates in the following format:
            {{
                obj: {{
                    "x_min": -1000,
                    "y_min": -1000,
                    "x_max": -1000,
                    "y_max": -1000
                }}
            }}\n 
        
Ensure that you only return results for the objects listed in [{user_input}], and no others. The output must be in valid JSON format.
\nASSISTANT:\n
"""


user_msg = f"""
<image>\nUSER:\n
Please detect only the following objects in the image: [{user_input}].

For each detected object in the list [{user_input}], provide the coordinates in the following format:
  {{
    '{user_input}_name': {{
        "x_min": <float>,
        "y_min": <float>,
        "x_max": <float>,
        "y_max": <float>
    }}
  }}\n
  
If any of the objects in the list [{user_input}] are not detected, use the following default:
{{
  '{user_input}_name': {{
      "x_min": -1000,
      "y_min": -1000,
      "x_max": -1000,
      "y_max": -1000
  }}
}}\n

Ensure that you only return results for the objects listed in [{user_input}], and no others. The output must be in valid JSON format.
\nASSISTANT:\n
"""
    response_format = {
        "type": "json_object",
        "schema": {
            "type": "object",
            "patternProperties": {
                "^[a-zA-Z]+$": {
                    "type": "object",
                    "properties": {
                        "x_min": {"type": "number"},
                        "y_min": {"type": "number"},
                        "x_max": {"type": "number"},
                        "y_max": {"type": "number"}
                    },
                    "required": ["x_min", "y_min", "x_max", "y_max"]
                }
            }
        }
    } 



    response_format = {
        "type": "json_object",
        "schema": {
            "type": "object",
            "properties": { 
                    "detected" : {"type": "boolean"},
                    "object_name" : {"type": "string"},
                    "x_min": {"type": "number"},
                    "y_min": {"type": "number"},
                    "x_max": {"type": "number"},
                    "y_max": {"type": "number"}
                    },
            "required": ["detected", "object_name", "x_min", "y_min", "x_max", "y_max"],
        }
    }

<괜찮은거>
    response_format = {
        "type": "json_object",
        "patternProperties": {
                "^[0-9]+$": {
                    "type": "object",
                    "properties": { 
                            "detected" : {"type": "boolean"},
                            "object_name" : {"type": "string"},
                            "x_min": {"type": "number"},
                            "y_min": {"type": "number"},
                            "x_max": {"type": "number"},
                            "y_max": {"type": "number"}
                            },
                    "required": ["detected", "object_name", "x_min", "y_min", "x_max", "y_max"],
        }
    }},

    response_format = {
    "type": "json_object",
    "properties": {
        "description": {
            "type": "string",
            "description": "A detailed description of the image."
        },
        "detected_objects": {
            "type": "object",
            "description": "A dictionary of detected objects and their coordinates.",
            "patternProperties": {
                ".*": {
                    "type": "object",
                    "properties": {
                        "x_min": {"type": "number"},
                        "y_min": {"type": "number"},
                        "x_max": {"type": "number"},
                        "y_max": {"type": "number"}
                    },
                    "required": ["x_min", "y_min", "x_max", "y_max"]
                }
            }
        }
    },
    "required": ["description", "detected_objects"]
}




response_format = {
    "type": "object",
    "properties": {
        "description": {
            "type": "string",
            "description": "A detailed description of the image."
        },
    },
    "patternProperties": {
        "^[0-9]+$": {
            "type": "object",
            "properties": { 
                "detected" : {"type": "boolean"},
                "object_name" : {"type": "string"},
                "x_min": {"type": "number"},
                "y_min": {"type": "number"},
                "x_max": {"type": "number"},
                "y_max": {"type": "number"}
            },
            "required": ["detected", "object_name", "x_min", "y_min", "x_max", "y_max"],
        }
    },
    "required": ["description"]
}

<image>\nUSER:\n

First, Please provide a detailed 'explanation' of the image. 
The explanation should "Describe the objects present in the image, and then determine whether the objects in the following list [{user_input}] are detected in the image." 

Second, please detect whether the following objects are present in the image based on the explanation: [{user_input}].
	For each object in the list [{user_input}],
	for i, obj in enumerate([{user_input}]):
	    if(obj detected), return the coordinates in the following format: 
		    {{
		        "detected" : true
		        "object_name" : obj,
		        "x_min": <float>,
		        "y_min": <float>,
		        "x_max": <float>,
		        "y_max": <float>
		    }} \n
	    else(obj not detected), return the coordinates in the following format: 
		    {{
		        "detected" : false
		        "object_name" :obj,
		        "x_min": -1000,
		        "y_min": -1000,
		        "x_max": -1000,
		        "y_max": -1000
		    }} 
 
Return the results in the following valid JSON format:
    {{
    "explanation": "<Description the objects present in the image, and then determination whether the objects in the list are detected>",
    "detected_objects": [
        {{
        "detected": <true> or <false>,
        "object_name": "<object_name>",
        "x_min": <float> or -1000,
        "y_min": <float> or -1000,
        "x_max": <float> or -1000,
        "y_max": <float> or -1000
        }},
        ...
    ]
    }}
\nASSISTANT:\n


<image>\nUSER:\n
First, please provide chain-of-thought(cot) that includes the following steps: 
1. Observation: Analyze all the objects present in the image.
2. Thought: Determine whether the objects from the user's list [{user_input}] are present or not in the image. Think based on the observation(at point 1). If the object was not said at the observation, then it is not present in the image.

Second, based on the cot, please detect 'only' [{user_input}] in the image.
    For each object in the list [{user_input}],
    for obj in [{user_input}]:
	    if (obj is present), return the coordinates in the following format: 
		    {{
		        "detected" : true
		        "object_name" : obj,
		        "x_min": <float>,
		        "y_min": <float>,
		        "x_max": <float>,
		        "y_max": <float>
		    }}\n
	    else(obj is not present), return the coordinates in the following format: 
		    {{
		        "detected" : false
		        "object_name" :obj,
		        "x_min": -1000,
		        "y_min": -1000,
		        "x_max": -1000,
		        "y_max": -1000
		    }} 
As a result, return the results in the following valid JSON format:
    {{
        "cot": {{
            "observation": "<Analysis of all the objects present in the image>",
            "thought": "<Determine of whether the objects from the user's list are present in the image based on observation>",
            "reasoning": "<Reasoning of the thought>"
        }},
        "detected_objects": [
            {{
                "detected": <boolean>,
                "object_name": "<object_name>",
                "x_min": <number>,
                "y_min": <number>,
                "x_max": <number>,
                "y_max": <number>
            }},
            ...
        ]
    }}
\nASSISTANT:\n


 response_format = {
        "type": "object",
        "properties": {
            "cot": {
                "type": "array",
                "description":  "whether specific objects are present in the image or not",
                "items": {
                    "type": "object", 
                    "properties": {
                        "observation": {"type": "string"},
                        "thought": {"type": "string"},
                        "reasoning": {"type": "string"}, 
                    },
                    "required": ["observation", "thought", "reasoning"]
                }
            },
            "detected_objects": {
                "type": "array",
                "description": "A dictionary of detected objects based on explanation and their coordinates.",
                "items": {
                    "type": "object",
                    "properties": {
                        "detected": {"type": "boolean"},
                        "object_name": {"type": "string"},
                        "x_min": {"type": "number"},
                        "y_min": {"type": "number"},
                        "x_max": {"type": "number"},
                        "y_max": {"type": "number"}
                    },
                    "required": ["detected", "object_name", "x_min", "y_min", "x_max", "y_max"]
                }
            }
        },
        "required": ["cot", "detected_objects"]
    },
    temperature = 0.0
)
